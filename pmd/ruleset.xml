<?xml version="1.0" encoding="UTF-8" ?>
<ruleset
	name="quickstart"
	xmlns="http://pmd.sourceforge.net/ruleset/2.0.0"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://pmd.sourceforge.net/ruleset/2.0.0 https://pmd.sourceforge.io/ruleset_2_0_0.xsd">
	<description>Quickstart configuration of PMD for Salesforce Apex, customized.</description>
	<exclude-pattern>.*/.sfdx/.*</exclude-pattern>

	<!-- BEST PRACTICES -->
	<rule ref="category/apex/bestpractices.xml/UnusedLocalVariable" message="Variable ''{0}'' defined but not used">
		<priority>2</priority>
	</rule>

	<!-- COMPLEXITY -->
	<rule ref="category/apex/design.xml/ExcessiveParameterList" message="Avoid long parameter lists (you have more than 10)">
		<priority>3</priority>
		<properties>
			<property name="minimum" value="10" />
		</properties>
	</rule>

	<rule ref="category/apex/design.xml/ExcessivePublicCount" message="This class has too many public methods and attributes">
		<priority>4</priority>
		<properties>
			<property name="minimum" value="40" />
		</properties>
	</rule>

	<!-- <rule ref="category/apex/design.xml/NcssConstructorCount" message="The constructor has an NCSS line count of {0}">
		<priority>3</priority>
		<properties>
			<property name="minimum" value="50" />
		</properties>
	</rule>

	<rule ref="category/apex/design.xml/NcssMethodCount" message="The method {0}() has an NCSS line count of {1}">
		<priority>3</priority>
		<properties>
			<property name="minimum" value="500" />
		</properties>
	</rule>

	<rule ref="category/apex/design.xml/NcssTypeCount" message="The type has an NCSS line count of {0}">
		<priority>3</priority>
		<properties>
			<property name="minimum" value="1500" />
		</properties>
	</rule> -->

	<!-- <rule ref="category/apex/design.xml/StdCyclomaticComplexity" message="The {0} ''{1}'' has a Standard Cyclomatic Complexity of {2}.">
		<priority>3</priority>
		<properties>
			<property name="reportLevel" value="100" />
		</properties>
	</rule> -->

	<rule ref="category/apex/design.xml/TooManyFields" message="Too many fields">
		<priority>3</priority>
		<properties>
			<property name="maxfields" value="50" />
		</properties>
	</rule>

	<rule ref="category/apex/design.xml/AvoidDeeplyNestedIfStmts" message="Deeply nested if..else statements are hard to read">
		<priority>3</priority>
		<properties>
			<property name="problemDepth" value="6" />
		</properties>
	</rule>

	<!-- <rule ref="category/apex/design.xml/CyclomaticComplexity">
		<priority>3</priority>
	</rule> -->

	<!-- <rule ref="category/apex/design.xml/CognitiveComplexity"/> -->
	<!-- PERFORMANCE -->
	<rule ref="category/apex/performance.xml/OperationWithLimitsInLoop" message="Avoid operations in loops that may hit governor limits">
		<priority>2</priority>
	</rule>

	<rule ref="category/apex/errorprone.xml/AvoidDirectAccessTriggerMap" message="Avoid directly accessing Trigger.old and Trigger.new">
		<priority>4</priority>
	</rule>

	<rule ref="category/apex/bestpractices.xml/AvoidLogicInTrigger" message="Avoid logic in triggers">
		<priority>4</priority>
	</rule>

	<rule ref="category/apex/bestpractices.xml/AvoidGlobalModifier" message="Avoid using global modifier">
		<priority>2</priority>
	</rule>

	<rule ref="category/apex/errorprone.xml/AvoidNonExistentAnnotations">
		<priority>1</priority>
	</rule>

	<rule ref="category/apex/errorprone.xml/AvoidHardcodingId" message="Avoid hardcoding ID's">
		<priority>2</priority>
	</rule>

	<!-- NAMING -->
	<rule ref="category/apex/codestyle.xml/ClassNamingConventions" message="Class names should begin with an uppercase character">
		<priority>2</priority>
	</rule>

	<rule ref="category/apex/codestyle.xml/MethodNamingConventions" message="Method name does not begin with a lower case character.">
		<priority>2</priority>
		<properties>
			<property name="testPattern" value="[a-z][a-zA-Z0-9_]*" />
			<property name="staticPattern" value="[a-z][a-zA-Z0-9]*" />
			<property name="instancePattern" value="[a-z][a-zA-Z0-9]*" />
		</properties>
	</rule>

	<rule ref="category/apex/errorprone.xml/MethodWithSameNameAsEnclosingClass" message="Classes should not have non-constructor methods with the same name as the class">
		<priority>1</priority>
	</rule>

	<!-- NAMING -->
	<rule ref="category/apex/codestyle.xml/FieldNamingConventions">
		<priority>3</priority>
			<properties>
				<property name="enumConstantPattern" value="[A-Z][A-Z0-9_]*" />
				<property name="constantPattern" value="[A-Z][A-Z0-9_]*" />
				<property name="finalPattern" value="[a-z][a-zA-Z0-9]*" />
				<property name="staticPattern" value="[a-z][a-zA-Z0-9_]*" />
				<property name="instancePattern" value="[a-z][a-zA-Z0-9_]*" />
			</properties>
		</rule>
	<rule ref="category/apex/codestyle.xml/FormalParameterNamingConventions">
		<priority>3</priority>
	</rule>

	<rule ref="category/apex/codestyle.xml/LocalVariableNamingConventions">
		<priority>3</priority>
		<properties>
			<property name="finalLocalPattern" value="[a-z][a-zA-Z0-9]*" />
			<property name="localPattern" value="[a-z][a-zA-Z0-9_]*" />
		</properties>
		
	</rule>

	<!--public class Foo {
			public Integer instanceProperty { get; set; } // This is in camel case, so it's ok
			public Integer INSTANCE_PROPERTY { get; set; } // This will be reported unless you change the regex
		}-->
	<rule ref="category/apex/codestyle.xml/PropertyNamingConventions">
		<priority>3</priority>
		<properties>
			<property name="staticPattern" value="[a-z][a-zA-Z0-9]*" />
			<property name="instancePattern" value="[a-z][a-zA-Z0-9]*" />
		</properties>
	</rule>

	<!-- TESTS -->
	<rule
		ref="category/apex/bestpractices.xml/ApexUnitTestClassShouldHaveAsserts"
		message="Apex unit test classes should have at least one System.assert() or assertEquals() or AssertNotEquals() call">
		<priority>3</priority>
	</rule>

	<rule
		ref="category/apex/bestpractices.xml/ApexUnitTestShouldNotUseSeeAllDataTrue"
		message="@isTest(seeAllData=true) should not be used in Apex unit tests because it opens up the existing database data for unexpected modification by tests">
		<priority>2</priority>
	</rule>

	<rule ref="category/apex/bestpractices.xml/ApexUnitTestMethodShouldHaveIsTestAnnotation">
		<priority>2</priority>
	</rule>

	<!--    <rule ref="category/apex/bestpractices.xml/ApexAssertionsShouldIncludeMessage"/> -->

	<rule ref="category/apex/errorprone.xml/TestMethodsMustBeInTestClasses">
		<priority>2</priority>
	</rule>

	<!-- SECURITY -->
	<rule ref="category/apex/security.xml/ApexSharingViolations" message="Apex classes should declare a sharing model if DML or SOQL is used">
		<priority>3</priority>
	</rule>

	<rule ref="category/apex/security.xml/ApexInsecureEndpoint" message="Apex callouts should use encrypted communication channels">
		<priority>3</priority>
	</rule>

	<rule ref="category/apex/errorprone.xml/ApexCSRF">
		<priority>3</priority>
	</rule>

	<rule ref="category/apex/security.xml/ApexOpenRedirect" message="Apex classes should safely redirect to a known location">
		<priority>3</priority>
	</rule>

	<rule ref="category/apex/security.xml/ApexSOQLInjection" message="Apex classes should escape variables merged in DML query">
		<priority>3</priority>
	</rule>

	<rule ref="category/apex/security.xml/ApexXSSFromURLParam" message="Apex classes should escape Strings obtained from URL parameters">
		<priority>3</priority>
	</rule>

	<rule ref="category/apex/security.xml/ApexXSSFromEscapeFalse" message="Apex classes should escape addError strings">
		<priority>4</priority>
	</rule>

	<rule ref="category/apex/security.xml/ApexBadCrypto" message="Apex Crypto should use random IV/key">
		<priority>4</priority>
	</rule>

	<!-- <rule ref="category/apex/security.xml/ApexCRUDViolation" message="Validate CRUD permission before SOQL/DML operation">
		<priority>4</priority>
	</rule> -->

	<rule ref="category/apex/security.xml/ApexDangerousMethods" message="Calling potentially dangerous method">
		<priority>3</priority>
	</rule>

	<rule ref="category/apex/security.xml/ApexSuggestUsingNamedCred" message="Consider using named credentials for authenticated callouts">
		<priority>3</priority>
	</rule>

	<!-- BRACES -->
	<rule ref="category/apex/codestyle.xml/IfStmtsMustUseBraces" message="Avoid using if statements without curly braces">
		<priority>1</priority>
	</rule>

	<rule ref="category/apex/codestyle.xml/WhileLoopsMustUseBraces" message="Avoid using 'while' statements without curly braces">
		<priority>1</priority>
	</rule>

	<rule ref="category/apex/codestyle.xml/IfElseStmtsMustUseBraces" message="Avoid using 'if...else' statements without curly braces">
		<priority>1</priority>
	</rule>

	<rule ref="category/apex/codestyle.xml/ForLoopsMustUseBraces" message="Avoid using 'for' statements without curly braces">
		<priority>1</priority>
	</rule>

	<!-- EMPTY -->
	<rule ref="category/apex/errorprone.xml/EmptyCatchBlock" message="Avoid empty catch blocks">
		<priority>2</priority>
	</rule>

	<rule ref="category/apex/errorprone.xml/EmptyIfStmt" message="Avoid empty 'if' statements">
		<priority>1</priority>
	</rule>

	<rule ref="category/apex/errorprone.xml/EmptyWhileStmt" message="Avoid empty 'while' statements">
		<priority>1</priority>
	</rule>

	<rule ref="category/apex/errorprone.xml/EmptyTryOrFinallyBlock" message="Avoid empty try or finally blocks">
		<priority>1</priority>
	</rule>

	<rule ref="category/apex/errorprone.xml/EmptyStatementBlock" message="Avoid empty block statements.">
		<priority>2</priority>
	</rule>

	<!-- STYLE -->
	<rule ref="category/apex/codestyle.xml/OneDeclarationPerLine">
		<priority>1</priority>
	</rule>

	<!-- <rule ref="category/apex/codestyle.xml/FieldDeclarationsShouldBeAtStart"/> -->

	<!-- ERROR_PRONE -->
	<!-- <rule ref="category/apex/documentation.xml/ApexDoc" message="Document classes, methods, and properties that are public or global.">
		<priority>3</priority>
		<properties>
			<property name="reportMissingDescription" value="false" />
			<property name="reportPrivate" value="false" />
			<property name="reportProtected" value="true" />
		</properties>
	</rule> -->

	<!-- CLARITY / BEST PRACTICES -->
	<!-- <rule ref="category/apex/bestpractices.xml/DebugsShouldUseLoggingLevel">
		<priority>4</priority>
	</rule> -->

	<!-- <rule ref="category/apex/errorprone.xml/OverrideBothEqualsAndHashcode" /> -->
</ruleset>
